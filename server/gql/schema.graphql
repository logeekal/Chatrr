type Query {
    userList: [User]
    roomMembers:[User]
    roomConversations:[Conversations]
    user(userName: String!): User
    rooms: [Room]
    room(name: String!): Room
    me: User
    isloggedIn(userName: String!): Boolean
}

type User {
    id: ID!
    userName: String!
    avatar: String!
    gender: String!
    ip: String!
    location: String!
    loggedIn: Boolean!
    createdAt: String!
    updatedAt: String!
}


type Conversations {
    id: ID!
    from: String!
    toUser: String
    toRoom: String
    toType: String!
    text: String!
    seen: Boolean
    delievered: Boolean
    sent: Boolean
    createdAt: Boolean
}

"*****************************"

enum RoomType {
    STANDARD
    CUSTOM
}

""" Rooms are kind of groups where anyone can enter and chat each other \
 personally and collaboratively."""
type Room {
    id: ID!
    name: String!
    title: String!
    avatar: String!
    description: String
    active: Boolean
    createdAt: String
    updatedAt: String
}



type Mutation {
    # if false, someone with same userName is already loggedin
    loginUser(userName: String!, gender: String! ): GenericResponse!

    """
    Need to update the username to something else on Logout...
    So that another user can login with same username.
    """    
    logoutUser(userName: String!): GenericResponse!

    """
    When a user first time joins a room. There is not way to exit all t
    the rooms, rather, a person can do change the room.
    
    Rooms are kind of groups where anyone can enter and chat each other \
    personally and collaboratively."
    """
    addUserToRoom(userName: String!, roomId: String!): GenericResponse!

    removeUserFromRoom(userName: String!): GenericResponse!

}

type GenericResponse {
    success: Boolean!
    error: String
}


type JoinRoomResponse{
    success: Boolean!
    error: String
    room: Room
}