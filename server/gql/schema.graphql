directive @auth(
    requires: Role = ADMIN,
) on OBJECT | FIELD_DEFINITION

enum Role {
    USER
    ADMIN
}

type Query {
    userList: [User]  #####
    user(userName: String!): User
    getUserConversations(userName: String!): ConversationTrail!
    # isloggedIn(userName: String!): Boolean
    
    roomUsers(roomId: ID!):[User]
    roomConversations(roomId: ID!, from: String!):[Conversations]
    rooms: [Room]

    # room(name: String!): Room ###
    # me: User ###   
}


type User @auth(requires: USER){
    id: ID!
    userName: String!
    avatar: String!
    gender: String!
    ip: String @auth(requires: ADMIN)
    location: String @auth(requires: ADMIN)
    connected: Boolean!
    loggedIn: Boolean!
    createdAt: String!
    updatedAt: String!
}


type Conversations @auth(requires: USER){
    id: ID!
    from: String!
    toUser: String
    toRoom: String
    toType: String!
    text: String!
    seen: Boolean
    delievered: Boolean
    sent: Boolean
    createdAt: String!
}

"*****************************"

enum RoomType {
    STANDARD
    CUSTOM
}

""" Rooms are kind of groups where anyone can enter and chat each other \
 personally and collaboratively."""
type Room @auth(requires: USER){
    id: ID!
    name: String!
    title: String!
    avatar: String!
    description: String
    active: Boolean
    createdAt: String
    updatedAt: String
}



type Mutation {
    # if false, someone with same userName is already loggedin
    loginUser ( userName: String!,
                avatar: String,
                gender: String,
                ip: String,
                location: String
                ): GenericResponse!

    """
    Need to update the username to something else on Logout...
    So that another user can login with same username.
    """    
    logoutUser (userName: String!): GenericResponse!

    """
    When a user first time joins a room. There is not way to exit all t
    the rooms, rather, a person can do change the room.
    
    Rooms are kind of groups where anyone can enter and chat each other \
    personally and collaboratively."
    """
    addUserToRoom (userName: String!, roomId: String!): GenericResponse! @auth(requires: USER)

    """
    sendConversation mutation helps system to send message from one entity to another entity, these entity can be 
    """
    sendConversation(userName: String, to: String!, toType: String!, text: String!) : GenericResponse! @auth(requires: USER)

    removeUserFromRoom(userName: String!): GenericResponse! @auth(requires: USER)

    updateConnectedStatus(userName: String!, status: Boolean!) : GenericResponse! @auth(requires: USER)
}

type GenericResponse {
    success: Boolean!
    error: String
}


type JoinRoomResponse{
    success: Boolean!
    error: String
    room: Room
}

type ConversationTrail {
    sentConversations: [Conversations],
    receivedConversations: [Conversations]
}

type UserName {
    userName: String!
}


type Subscription {
    """
    newUserInRoom is subsriptions which notifies the client when a new user joins a Room
    """
    newUserInRoom(roomId: String!) : User!

    newUserLeftRoom(roomId: String!) : User!

    newLogin: User!

    newLogout: UserName!

    newChatMessageToUser(userName: String!) : Conversations!

    newChatMessageInRoom(roomId: String!) : Conversations!

}